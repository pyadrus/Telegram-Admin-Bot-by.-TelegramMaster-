import re
import sqlite3
from aiogram import F
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER
from aiogram.filters import CommandStart
from aiogram.types import ChatMemberUpdated, ChatPermissions
from aiogram.types import Message
from loguru import logger  # https://github.com/Delgan/loguru

from models.models import connect_session_to_telegram_account, read_database
from system.dispatcher import bot, dp, allowed_user_ids

phone_number_pattern = re.compile(r'(\+?\d{1,3}[-\s]?\d{3,4}[-\s]?\d{2,4}[-\s]?\d{2,4})')


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    user_date = message.date.strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"{user_id} {user_name} {user_first_name} {user_last_name} {user_date}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    sign_up_text = (
        "‚ö†Ô∏è –ë–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø ‚ö†Ô∏è\n\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(message.from_user.id, sign_up_text,
                           disable_web_page_preview=True)


@dp.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_user_join(event: ChatMemberUpdated):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É
    IS_NOT_MEMBER >> IS_MEMBER - –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
    IS_MEMBER >> IS_NOT_MEMBER - –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã
    """
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ò–º—è - {event.new_chat_member.user.first_name} {event.new_chat_member.user.last_name} '
                f'username - {event.new_chat_member.user.username} id - {event.new_chat_member.user.id} '
                f'–≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É.')


@dp.message(F.new_chat_members)
async def new_chat_member(message: types.Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É
    ContentType = new_chat_members (https://docs.aiogram.dev/en/v3.1.1/api/enums/content_type.html)
    """
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ –≥—Ä—É–ø–ø—ã


@dp.message(F.left_chat_member)
async def left_chat_member(message: types.Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É
    ContentType = left_chat_member (https://docs.aiogram.dev/en/v3.1.1/api/enums/content_type.html)
    """
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã


async def write_to_database(link):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        conn = sqlite3.connect('setting/database.db')
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS links (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                link TEXT NOT NULL UNIQUE,
                added_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞
        cursor.execute('SELECT COUNT(1) FROM links WHERE link = ?', (link,))
        if cursor.fetchone()[0] > 0:
            logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø–∏—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('INSERT INTO links (link) VALUES (?)', (link,))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        conn.commit()

        logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    except sqlite3.Error as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {error}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()


@dp.message(F.text)
async def any_message(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫: –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.text} –æ—Ç {message.from_user.username} {message.from_user.id}')
    logger.info(f'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}')
    try:
        if message.entities:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            for entity in message.entities:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
                logger.info(f'–¢–∏–ø —Å—Å—ã–ª–∫–∏: {entity.type}')
                if entity.type in ["url", "text_link", "mention"]:
                    link = message.text[
                           entity.offset:entity.offset + entity.length] if entity.type != "text_link" else entity.url
                    logger.info(f"–°—Å—ã–ª–∫–∞ ({entity.type}) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üîó: {link}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    conn = sqlite3.connect('setting/database.db')
                    cursor = conn.cursor()
                    cursor.execute('SELECT COUNT(1) FROM links WHERE link = ?', (link,))
                    link_exists = cursor.fetchone()[0] > 0
                    conn.close()

                    if link_exists:
                        logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

                    logger.info(f"–°—Å—ã–ª–∫–∞ '{link}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ ID.")
                    client, username_id = await connect_session_to_telegram_account(link)

                    if message.from_user.id not in allowed_user_ids:
                        logger.info(f'ID –≥—Ä—É–ø–ø—ã {link}: {username_id}')
                        users = await read_database()
                        user_found = False
                        for user in users:
                            logger.info(f'ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {user[0]}')
                            if username_id == user[0]:
                                user_found = True
                                user_id = message.from_user.id
                                permissions = ChatPermissions(can_send_messages=False)
                                try:
                                    await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user_id,
                                                                   permissions=permissions)
                                    logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:({message.from_user.username} '
                                                f'{message.from_user.id}). –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message.text}')

                                    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å—Å—ã–ª–∫—É
                                    await client.disconnect()
                                except TelegramBadRequest:
                                    await client.disconnect()
                        if not user_found:
                            logger.info(
                                f'ID –≥—Ä—É–ø–ø—ã {link}: {username_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
                            await write_to_database(link)  # –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:({message.from_user.username} '
                                f'{message.from_user.id}). –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message.text}')
                    await client.disconnect()
    except Exception as error:
        logger.info(f'–û—à–∏–±–∫–∞: {error}')  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏


@dp.edited_message(F.text)
async def edit_message(message: types.Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.text} –æ—Ç {message.from_user.username} {message.from_user.id}')
    logger.info(f'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}')
    try:
        if message.entities:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            for entity in message.entities:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
                logger.info(f'–¢–∏–ø —Å—Å—ã–ª–∫–∏: {entity.type}')
                if entity.type in ["url", "text_link", "mention"]:
                    link = message.text[
                           entity.offset:entity.offset + entity.length] if entity.type != "text_link" else entity.url
                    logger.info(f"–°—Å—ã–ª–∫–∞ ({entity.type}) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üîó: {link}")

                    client, username_id = await connect_session_to_telegram_account(link)
                    logger.info(f'ID –≥—Ä—É–ø–ø—ã {link}: {username_id}')
                    users = await read_database()
                    for user in users:
                        logger.info(f'ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {user[0]}')
                        if username_id == user[0]:
                            user_id = message.from_user.id
                            permissions = ChatPermissions(can_send_messages=False)
                            await bot.restrict_chat_member(chat_id=message.chat.id, user_id=user_id,
                                                           permissions=permissions)
                            logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:({message.from_user.username} '
                                        f'{message.from_user.id}). –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message.text}')
                            await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å—Å—ã–ª–∫—É
                            await client.disconnect()
    except Exception as error:
        logger.info(f'–û—à–∏–±–∫–∞: {error}')  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏


def register_greeting_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.message.register(command_start_handler)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã
